(Intro)

(Http headers)

(Simple web request)

Look at DB query first

Caching:
Lots of solutions
Memcached, Redis, ElastiCache ( Amazon )
Check cache before reads
Fetch and write on misses

Simple code example
Just wrap a cache check around the database call

(web request with application caching)

Saved some time, took some load off the DB, but it's not all wins.

"Cache Invalidation"

Stale is ok sometimes:
My Profile vs Dave's Profile

Otherwise...

(Code)
Update the data, update the cache

sacrifice Freshness
- stale data is easy

sacrifice Complexity
- cache evicition can be tricky
- get all the places

read/write ratio matters
- more reads than writes is super-important

(Output Caching)
cache fully rendered content

(code)

quick cache check before render
version in key
- quick peek at data gives us freshness
could still cache at data layer
look at data or not
track data version

(output caching diagram)

(tradeoffs)
Super-fast
Server can still make decisions
personalization is harder
- best gains when everyone sees the same thing
Lots of data, lots of sources = tough invalidation

(conditional get + example)

(conditional get sequence)

(tradeoffs)
needs metadata
- version/last modified on data is helpful
- files usually have last modified
- combining data for generated content can be tricky
round trip
- tiny responses aren't amazing
- big files are pretty good

cached for one user vs everyone?

(cache-control)
public/private - allow intermediates to cache vs not
max-age - cache duration in seconds

(max-age diagram)

(max-age tradeoffs)
no request at all
never-changing is great
- url per app version
- new image urls, not overwrites
no direct expiration
- can't change the resouce
- must change the reference
amazing for javascript libraries
other resources for client-side applications

(cdn)
Akamai, CloudFront, CloudFlare
lots of computers
geo-close
fast networks
static only or static+proxy
Netflix

(cdn diagram)

(cdn tradeoffs)
Fast
- close to everybody
- freshness checks are quick
- downloads are quick
- hardware is fast
- significant offloading for backend
- inside the SSL - can cache for everyone
Control
- revalidate can hit origin servers
- security checks can hit origin servers
- can invalidate documents
- sometimes expensive ( talk to lots of servers all over the world )
new resource names is best
We have one

